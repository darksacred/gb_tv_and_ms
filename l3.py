# 1.
# Даны значения зарплат из выборки выпускников:
# 100, 80, 75, 77, 89, 33, 45, 25, 65, 17, 30, 24, 57, 55, 70, 75, 65, 84, 90, 150
#
# среднее арифметическое:
# M = 1306/20=65.3 -> 50%
# m = 65.3
nums = [100, 80, 75, 77, 89, 33, 45, 25, 65, 17, 30, 24, 57, 55, 70, 75, 65, 84, 90, 150]
n = len(nums) - 1
sum_num = 0
for num in nums:
    sum_num += num
m = sum_num / (n + 1)
print(f' Cреднее арифметическое: {round(m, 2)}')
# Cреднее арифметическое: 65.3

# среднее квадратичное отклонение:
nums = [100, 80, 75, 77, 89, 33, 45, 25, 65, 17, 30, 24, 57, 55, 70, 75, 65, 84, 90, 150]
n = len(nums) - 1
sum_num = 0
for num in nums:
    sum_num += (num - m) ** 2
print(f'Среднее квадратичное отклонение ровна: {round(sum_num / (n + 1), 2)}')
# Среднее квадратичное отклонение ровна: 950.11

# смещенную оценки дисперсий:
s = 950.11
d = s ** 2
print(f'Смещенную оценки дисперсий ровна: {round(d, 2)}')
# Смещенную оценки дисперсий ровна: 902709.01

# несмещенную оценки дисперсий:
n = len(nums) - 1
sum_num = 0
for num in nums:
    sum_num += (num - m) ** 2
print(f'Несмещенную оценки дисперсий ровна: {round((sum_num ** 2) / n, 2)}')
# Несмещенную оценки дисперсий ровна: 19004400.25


# 2.
import numpy as np
from math import factorial


def combinations(n, k):
    return int(factorial(n) / (factorial(k) * factorial(n - k)))


# Посмотрев решение задач с шариками, понял, что задачу совершенно не выполнил, попробую тут правильно решить.

p1 = (combinations(3, 2) / combinations(8, 2)) * ((combinations(5, 3) * combinations(7, 1)) / combinations(12, 4))
print(f'Кол-во сочетаний (2 чёрных) и (3 белых, 1 чёрный): {p1}')
# Кол-во сочетаний (2 чёрных) и (3 белых, 1 чёрный): 0.01515151515151515

p2 = ((combinations(5, 1) * combinations(3, 1)) / combinations(8, 2)) * \
     ((combinations(5, 2) * combinations(7, 2)) / combinations(12, 4))
print(f'Кол-во сочетаний (1 белый, 1 чёрный) и (2 белых, 2 чёрных): {p2}')
# Кол-во сочетаний (1 белый, 1 чёрный) и (2 белых, 2 чёрных): 0.22727272727272727

p3 = (combinations(5, 2) / combinations(8, 2)) * \
     ((combinations(5, 1) * combinations(7, 3)) / combinations(12, 4))
print(f'Кол-во сочетаний (2 белых) и (1 белый, 3 чёрных): {p3}')
# Кол-во сочетаний (2 белых) и (1 белый, 3 чёрных): 0.12626262626262627

p = (p1 + p2 + p3) * 100
print(f'Вероятность того, что 3 мяча белые: {round(p, 2)}%')
# Вероятность того, что 3 мяча белые: 36.87%


# 3.
n = 3
k = 1
p1 = 0.9
p2 = 0.8
p3 = 0.6
# По формуле Байеса
p = ((k / n) * p1) + ((k / n) * p2) + ((k / n) * p2)
x1 = ((k / n) * p1) / p
print(f'Шанс выстрела первым стрелком: {round(x1, 2)}%')
x2 = ((k / n) * p2) / p
print(f'Шанс выстрела вторым стрелком: {round(x2, 2)}%')
x3 = ((k / n) * p3) / p
print(f'Шанс выстрела третьим стрелком: {round(x3, 2)}%')
# Шанс выстрела первым стрелком: 0.36%
# Шанс выстрела вторым стрелком: 0.32%
# Шанс выстрела третьим стрелком: 0.24%


# 4.
n = 3
k = 1
A = 0.8
B = 0.7
C = 0.9
# По формуле Байеса
p = ((k / n) * A) + ((k / n) * B) + ((k / n) * C)
x1 = ((k / n) * A) / p
print(f'Студент из А факультета: {round(x1, 2)}%')
x2 = ((k / n) * B) / p
print(f'Студент из В факультета: {round(x2, 2)}%')
x3 = ((k / n) * C) / p
print(f'Студент из С факультета: {round(x3, 2)}%')
# Студент из А университета: 0.33%
# Студент из В университета: 0.29%
# Студент из С университета: 0.37%


# 5
n = 12
k = 1
p1 = 0.1
p2 = 0.2
p3 = 0.25
x1 = combinations(n, k) * (p1 ** k) * (1 - p1) ** (n - k)
x2 = combinations(n, k) * (p2 ** k) * (1 - p2) ** (n - k)
x3 = combinations(n, k) * (p3 ** k) * (1 - p3) ** (n - k)
x = (x1 * x2 * x3)
print(f'Все детали выйдут из строя в первый месяц: {round(x * 100, 2)}%')
x = (x1 * x2) + (x1 * x3) + (x2 * x3)
print(f'2 детали выйдут из строя в первый месяц: {round(x * 100, 2)}%')
x = (x1 + x2 + x3) - (x1 * x2 * x3)
print(f'1 деталь выйдет из строя в первый месяц: {round(x * 100, 2)}%')
x = (x1 + x2 + x3) + ((x1 * x2) + (x1 * x3) + (x2 * x3))
print(f'От 1 до 2 детали выйдут из строя в первый месяц: {round(x * 100, 2)}%')
# Все детали выйдут из строя в первый месяц: 0.98%
# 2 детали выйдут из строя в первый месяц: 15.15%
# 1 деталь выйдет из строя в первый месяц: 69.96%
# От 1 до 2 детали выйдут из строя в первый месяц: 86.09%
